import * as mocha from "mocha";
import chai, { expect } from "chai";
import assertArrays from "chai-arrays";

import ADDRESSES from "../../../../conf/_addresses";
import DISPLAY from "../../../../conf/_display";
import CHARSET from "../../../../conf/_charset";

import Memory from "../../memory";
import Registers from "../../registers";
import Disassembler from "../../disassembler";
import Display from "../../display";
import Keyboard from "../../keyboard";
import execute from "../_execute";
import _getEmptyFrame from "../../display/_getEmptyFrame";

chai.use(assertArrays);

const cases = [
	{
		desc: "0x00e0 should trigger CLS and clear the frame",
		code: 0x00e0,
		shouldReset: true,
		expect: {
			frame: _getEmptyFrame(DISPLAY.width, DISPLAY.height),
		},
	},
	{
		desc: "0x00ee should trigger RET and set PC to address from stack",
		code: 0x00ee,
		shouldReset: true,
		stack: [513],
		expect: {
			sp: -1,
			pc: 513,
		},
	},
	{
		desc: "0x1ffd should trigger JP_addr and set PC to 4093",
		code: 0x1ffd,
		shouldReset: true,
		expect: {
			pc: 4093,
		},
	},
	{
		desc: "0x2ffd should trigger CALL_addr and set PC to 4093",
		code: 0x2ffd,
		shouldReset: true,
		expect: {
			sp: 0,
			pc: 4093,
			pop: 514,
		},
	},
	{
		desc: "0x3e0f should trigger SE_VX_BYTE and set PC to 516",
		code: 0x3e0f,
		shouldReset: true,
		v: [[14, 15]],
		expect: {
			pc: 516, // SE_VX_BYTE increases default PC by 4
		},
	},
	{
		desc: "0x4e0f should trigger SNE_VX_BYTE and set PC to 516",
		code: 0x4e0f,
		shouldReset: true,
		v: [[14, 0]],
		expect: {
			pc: 516, // SNE_VX_BYTE increases default PC by 4
		},
	},
	{
		desc: "0x5ed0 should trigger SE_VX_VY and set PC to 516",
		code: 0x5ed0,
		shouldReset: true,
		v: [
			[14, 0],
			[13, 0],
		],
		expect: {
			pc: 516, // SNE_VX_BYTE increases default PC by 4
		},
	},
	{
		desc: "0x6e0f should trigger LD_BYTE and set V[14] to 15",
		code: 0x6e0f,
		shouldReset: true,
		expect: {
			v: [[14, 15]],
		},
	},
	{
		desc: "0x7e0f should trigger ADD_BYTE and set V[14] to 30",
		code: 0x7e0f,
		shouldReset: true,
		v: [[14, 15]],
		expect: {
			v: [[14, 30]],
		},
	},
	{
		desc: "0x8de0 should trigger LD_VX_VY and set V[13] to V[14] = 30",
		code: 0x8de0,
		shouldReset: true,
		v: [
			[13, 15],
			[14, 30],
		],
		expect: {
			v: [[13, 30]],
		},
	},
	{
		desc: "0x8de1 should trigger OR_VX_VY and set V[13] to V[13] | V[14]",
		code: 0x8de1,
		shouldReset: true,
		v: [
			[13, 0b1010],
			[14, 0b1001],
		],
		expect: {
			v: [[13, 0b1011]],
		},
	},
	{
		desc: "0x8de2 should trigger AND_VX_VY and set V[13] to V[13] & V[14]",
		code: 0x8de2,
		shouldReset: true,
		v: [
			[13, 0b1010],
			[14, 0b1001],
		],
		expect: {
			v: [[13, 0b1000]],
		},
	},
	{
		desc: "0x8de3 should trigger AND_VX_VY and set V[13] to V[13] ^ V[14]",
		code: 0x8de3,
		shouldReset: true,
		v: [
			[13, 0b1010],
			[14, 0b1001],
		],
		expect: {
			v: [[13, 0b0011]],
		},
	},
	{
		desc: "0x8de4 should trigger ADD_VX_VY and set V[13] to 255 and V[15] to 0",
		code: 0x8de4,
		shouldReset: true,
		v: [
			[13, 200],
			[14, 55],
		],
		expect: {
			v: [
				[13, 255],
				[15, 0],
			],
		},
	},
	{
		desc: "0x8de4 should trigger ADD_VX_VY and set V[13] to 1 and V[15] to 1",
		code: 0x8de4,
		shouldReset: true,
		v: [
			[13, 200],
			[14, 58],
		],
		expect: {
			v: [
				[13, 2],
				[15, 1],
			],
		},
	},
	{
		desc: "0x8de5 should trigger SUB_VX_VY and set V[13] to 150 and V[15] to 1",
		code: 0x8de5,
		shouldReset: true,
		v: [
			[13, 200],
			[14, 50],
		],
		expect: {
			v: [
				[13, 150],
				[15, 1],
			],
		},
	},
	{
		desc: "0x8de5 should trigger SUB_VX_VY and set V[13] to 150 and V[15] to 0",
		code: 0x8de5,
		shouldReset: true,
		v: [
			[13, 50],
			[14, 200],
		],
		expect: {
			v: [
				[13, 106], // 255 - (150) + 1
				[15, 0],
			],
		},
	},
	{
		desc: "0x8de6 should trigger SHR_VX_VY and set V[13] to 20 and V[15] to 0",
		code: 0x8de6,
		shouldReset: true,
		v: [[13, 40]],
		expect: {
			v: [
				[13, 20], // 40 / 2
				[15, 0],
			],
		},
	},
	{
		desc: "0x8de6 should trigger SHR_VX_VY and set V[13] to 20 and V[15] to 1",
		code: 0x8de6,
		shouldReset: true,
		v: [[13, 41]],
		expect: {
			v: [
				[13, 20], // 41 / 2 = 20.5 => 20 in binary
				[15, 1],
			],
		},
	},
	{
		desc:
			"0x8de7 should trigger SUBN_VX_VY and set V[13] to 150 and V[15] to 0",
		code: 0x8de7,
		shouldReset: true,
		v: [
			[13, 200],
			[14, 50],
		],
		expect: {
			v: [
				[13, 106], // 255 - (150) + 1
				[15, 0],
			],
		},
	},
	{
		desc:
			"0x8de7 should trigger SUBN_VX_VY and set V[13] to 150 and V[15] to 1",
		code: 0x8de7,
		shouldReset: true,
		v: [
			[13, 50],
			[14, 200],
		],
		expect: {
			v: [
				[13, 150],
				[15, 1],
			],
		},
	},
	{
		desc: "0x8dee should trigger SHL_VX_VY and set V[13] to 80 and V[15] to 0",
		code: 0x8dee,
		shouldReset: true,
		v: [[13, 40]],
		expect: {
			v: [
				[13, 80], // 40 * 2
				[15, 0],
			],
		},
	},
	{
		desc: "0x8dee should trigger SHL_VX_VY and set V[13] to 2 and V[15] to 1",
		code: 0x8dee,
		shouldReset: true,
		v: [[13, 129]],
		expect: {
			v: [
				[13, 2], // 129 * 2 = 258 => 258 - 255 - 1 = 2
				[15, 1],
			],
		},
	},
	{
		desc: "0x9ed0 should trigger SNE_VX_VY and set PC to 516",
		code: 0x9ed0,
		shouldReset: true,
		v: [
			[14, 0],
			[13, 1],
		],
		expect: {
			pc: 516, // SNE_VX_BYTE increases default PC by 4
		},
	},
	{
		desc: "0xaffe should trigger LD_I and set I to 4094",
		code: 0xaffe,
		shouldReset: true,
		expect: {
			i: 4094,
		},
	},
	{
		desc: "0xb003 should trigger JP_V0 and set PC to 4095",
		code: 0xbffc,
		shouldReset: true,
		v: [[0, 3]],
		expect: {
			pc: 4095,
		},
	},
	{
		desc:
			"0xd505 should trigger DRW_VX_VY_NIBBLE and set display frame to show 1 from position 10, 20",
		code: 0xd505,
		shouldReset: true,
		v: [
			[0, 20],
			[5, 10],
		],
		i: 0x05,
		expect: {
			frame: [
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					32,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					64,
					32,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					32,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					32,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					64,
					32,
					16,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
				],
			],
			v: [[15, 0]],
		},
	},
	{
		desc: "0xd505 should trigger DRW_VX_VY_NIBBLE and set V[15] to 1",
		code: 0xd505,
		v: [
			[0, 20],
			[5, 10],
		],
		i: 0x05,
		expect: {
			v: [[15, 1]],
		},
	},
	{
		desc: "0xe09e should trigger SKP_VX and set PC to 516",
		code: 0xe09e,
		shouldReset: true,
		v: [[0, 0]],
		k: "!",
		expect: {
			pc: 516,
		},
	},
	{
		desc: "0xe0a1 should trigger SKNP_VX and set PC to 516",
		code: 0xe0a1,
		shouldReset: true,
		v: [[0, 1]],
		k: "!",
		expect: {
			pc: 516,
		},
	},
	{
		desc: "0xf007 should trigger LD_VX_DT and set V[0] to 10",
		code: 0xf007,
		shouldReset: true,
		dt: 10,
		expect: {
			v: [[0, 10]],
		},
	},
	{
		desc: "0xf00a should trigger LD_VX_BYTE and set V[0] to 10",
		code: 0xf00a,
		shouldReset: true,
		v: [[0, 20]],
		expect: {
			k: {
				k: "!",
				v: [[0, 0]],
			},
		},
	},
	{
		desc: "0xf015 should trigger LD_DT_VX and set DT to 10",
		code: 0xf015,
		shouldReset: true,
		v: [[0, 10]],
		expect: {
			dt: 10,
		},
	},
	{
		desc: "0xf018 should trigger LD_ST_VX and set ST to 10",
		code: 0xf018,
		shouldReset: true,
		v: [[0, 10]],
		expect: {
			st: 10,
		},
	},
	{
		desc: "0xf01e should trigger ADD_I_VX and set i to 11",
		code: 0xf01e,
		shouldReset: true,
		i: 1,
		v: [[0, 10]],
		expect: {
			i: 11,
		},
	},
	{
		desc: `0xf029 should trigger LD_F_VX and set i to ${10 * CHARSET.height}`,
		code: 0xf029,
		shouldReset: true,
		v: [[0, 10]],
		expect: {
			i: 10 * CHARSET.height,
		},
	},
	{
		desc:
			"0xf033 should trigger LD_B_VX and set memory[0] to 1 and set memory[1] to 2 and set memory[2] to 3",
		code: 0xf033,
		shouldReset: true,
		v: [[0, 123]],
		i: 0,
		expect: {
			mem: [
				[0, 1],
				[1, 2],
				[2, 3],
			],
		},
	},
	{
		desc:
			"0xf255 should trigger LD_I_VX and set memory[10] to 1 and set memory[11] to 2 and set memory[12] to 3",
		code: 0xf255,
		shouldReset: true,
		v: [
			[0, 1],
			[1, 2],
			[2, 3],
		],
		i: 10,
		expect: {
			mem: [
				[10, 1],
				[11, 2],
				[12, 3],
			],
		},
	},
	{
		desc:
			"0xf265 should trigger LD_VX_I and set V[0] to 1 and set V[1] to 2 and set V[2] to 3",
		code: 0xf265,
		shouldReset: true,
		mem: [
			[10, 1],
			[11, 2],
			[12, 3],
		],
		i: 10,
		expect: {
			v: [
				[0, 1],
				[1, 2],
				[2, 3],
			],
		},
	},
];

const r = Registers();
const m = Memory(ADDRESSES.ram_end);
const d = Display(DISPLAY.width, DISPLAY.height);
const da = Disassembler();
const k = Keyboard();

let canExecute = true;

describe("Opcode Test", () => {
	after(function () {
		r.stopInterval();
	});
	cases.map((c, index) =>
		it(c.desc, (done) => {
			if (c.shouldReset) {
				r.reset();
				m.reset();
				d.reset();
				k.reset();
				m.setRange(ADDRESSES.char_set, new Uint8Array(CHARSET.lowRes));
			}

			if (c.stack) {
				c.stack.map((val) => r.pushOntoStack(val));
			}

			if (c.v) {
				c.v.map((val) => r.setV(val[0], val[1]));
			}

			if (c.mem) {
				c.mem.map((val) => m.set(val[0], val[1]));
			}

			if (c.k) {
				k.handleKeydown(({
					key: c.k,
				} as unknown) as KeyboardEvent);
			}

			if (c.i >= -1) {
				r.setI(c.i);
			}

			if (c.dt >= -1) {
				r.setDelay(c.dt);
			}

			if (canExecute)
				execute(
					da.disassemble(c.code),
					d,
					r,
					m,
					k,
					() => (canExecute = false),
					() => (canExecute = true)
				);

			if (c.expect.k) {
				k.handleKeydown(({
					key: c.expect.k.k,
				} as unknown) as KeyboardEvent);
				setImmediate(() =>
					k.handleKeyup(({
						key: c.expect.k.k,
					} as unknown) as KeyboardEvent)
				);
				k.once("keyup", () => {
					if (c.expect.k.v) {
						c.expect.k.v.map((val) => expect(r.getV(val[0])).to.equal(val[1]));
					}

					done();
				});
			}

			setImmediate(() => {
				if (c.expect.frame) {
					expect(JSON.stringify(d.getFrame())).to.equal(
						JSON.stringify(c.expect.frame)
					);
				}

				if (c.expect.sp >= -1) {
					expect(r.getSP()).to.equal(c.expect.sp);
				}

				if (c.expect.pc >= -1) {
					expect(r.getPC()).to.equal(c.expect.pc);
				}

				if (c.expect.dt >= -1) {
					expect(r.getDelay()).to.equal(c.expect.dt);
				}

				if (c.expect.st >= -1) {
					expect(r.getSound()).to.equal(c.expect.st);
				}

				if (c.expect.i >= -1) {
					expect(r.getI()).to.equal(c.expect.i);
				}

				if (c.expect.pop >= -1) {
					expect(r.popFromStack()).to.equal(c.expect.pop);
				}

				if (c.expect.v) {
					c.expect.v.map((val) => expect(r.getV(val[0])).to.equal(val[1]));
				}

				if (c.expect.mem) {
					c.expect.mem.map((val) => expect(m.get(val[0])).to.equal(val[1]));
				}

				if (c.expect.frame) {
					expect(JSON.stringify(d.getFrame())).to.equal(
						JSON.stringify(c.expect.frame)
					);
				}

				if (!c.expect.k) done();
			});
		})
	);
});
